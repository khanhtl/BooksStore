@inject NavigationManager Navigation

<div style="@BackgroundStyle" @attributes="UserAttributes" class="card" @onclick="NavigateToBookDetails">
    <h6>@Book?.Title</h6>
    <p>Author: @Book?.AuthorName</p>
    <p>Publishing date: @Book?.PublishingDate</p>
    @if (WithButton)
    {
        <button class="main-button" @onclick="AddToCart">Add to Cart</button>
    }
</div>

@code
{
    [Parameter, EditorRequired]
    public Book? Book { get; set; }

    [Parameter]
    public bool WithButton { get; set; } = true;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? UserAttributes { get; set; }

    [Parameter]
    public EventCallback<Book?> OnAddToCartClicked { get; set; }

    [CascadingParameter]
    public string? BackgroundStyle { get; set; }

    private void AddToCart()
    {
        OnAddToCartClicked.InvokeAsync(Book);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(BackgroundStyle),
       out var value))
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                BackgroundStyle = "background-color:white";
            }
        }
        await base.SetParametersAsync(parameters);
    }

    private void NavigateToBookDetails()
    {
        var url = $"/book/{Book.Id}";
        Navigation.NavigateTo(url);
    }
}